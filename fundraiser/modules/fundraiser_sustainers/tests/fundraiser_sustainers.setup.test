<?php
/**
 * @file
 * Fundraiser sustainer module setup class for testing.
 */

/**
 * Paren
 */
class FundraiserSustainerSetup extends FundraiserSetup {

  /**
   * Create a sustainer key file. Required for processing sustainers.
   *
   * @param $key_value NULL|bool|string
   *   The value of the sustainer key file. Defaults to FALSE; which will
   *   create a correct key. Passing values other than FALSE, or the
   *   correct path, will create an incorrect key.
   */
  public function setSustainerKey($key_value = FALSE) {
    // If $key_value is FALSE set it to the path.
    if ($key_value === FALSE) {
      $key_value = trim($_SERVER['HTTP_HOST']) . rtrim(base_path(), '/');
    }

    $file_path = variable_get('file_public_path', conf_path() . '/files');
    variable_set('encrypt_secure_key_path', $file_path);

    // Delete file if it already exists.
    if (file_exists($file_path . '/sustainer.key')) {
      unlink($file_path . '/sustainer.key');
    }

    // Write a new sustainer key file.
    file_put_contents($file_path . '/sustainer.key', $key_value);
  }

  /**
   * Helper to create a fundraiser sustainer donation.
   */
  public function createFundraiserSustainer() {
    // Create a node.
    $node = $this->createDonationForm();
    // Post to the node.
    $month = date('n', strtotime('+1 year'));
    $year = date('Y', strtotime('+1 year'));
    $post['submitted[payment_information][recurs_monthly][recurs]'] = 'recurs';
    $post['submitted[payment_information][payment_fields][credit][expiration_date][card_expiration_month]'] = $month;
    $post['submitted[payment_information][payment_fields][credit][expiration_date][card_expiration_year]'] = $year;
    $post['submitted[donor_information][mail]'] = 'fundraiser_sustainer@example.com';
    $this->submitDonation($node->nid, $post);
  }

  /**
   * Helper function to create a series of recurring donations.
   */
  public function fundraiserSustainerCreateRecurringDonation($post_config = NULL) {
    // Create a node.
    $created_user = $this->createFundraiserUser();
    $this->drupalLogin($created_user);
    $node = $this->createDonationForm();
    // Post to the node.
    $month = date('n', strtotime('+1 year'));
    $year = date('Y', strtotime('+1 year'));
    $post['submitted[payment_information][recurs_monthly][recurs]'] = 'recurs';
    $post['submitted[payment_information][payment_fields][credit][expiration_date][card_expiration_month]'] = $month;
    $post['submitted[payment_information][payment_fields][credit][expiration_date][card_expiration_year]'] = $year;
    $post['submitted[donor_information][mail]'] = $created_user->mail;

    if (!empty($post_config)) {
      $post = array_merge($post, (array) $post_config);
    }

    $this->submitDonation($node->nid, $post);
    // Get the master did.
    $donations = _fundraiser_get_donations();
    $master_did = '';
    foreach ($donations as $donation) {
      $master_did = $donation->did;
      break;
    }
    return $master_did;
  }

  /**
   * Helper function to check how many sustainers were processed after cron is run.
   */
  public function fundraiserSustainerChargeCount($master_did) {
    $query = db_select('fundraiser_sustainers', 'f')
      ->fields('f')
      ->condition('master_did', $master_did, '=')
      ->condition('gateway_resp', 'success', '=')
      ->condition('did', $master_did, '!='); // exclude first order in series
    return $query->countQuery()->execute()->fetchField();
  }
}
