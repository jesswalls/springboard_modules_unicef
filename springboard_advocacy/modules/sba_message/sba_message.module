<?php


/**
 * @file
 * Module for the SBA Message Entity
 */

/**
 * Implements hook_menu.
 * @return array
 */
function sba_message_menu() {
    $items =  array();
    $items['node/%/messages'] = array(
        'title' => 'Messages',
        'page arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'access callback' => 'sba_message_access',
        'access arguments' => array('manage-messages'),
      ) + springboard_advocacy_menu_common(TRUE, TRUE);

  return $items;
}


/**
 * Determines whether the given user has access to a sba_message.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $sba_message
 *   Optionally a sba_message or a sba_message type to check access for. If nothing is
 *   given, access for all sba_messages is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function sba_message_access($op, $sba_message = NULL, $account = NULL) {
  // Messages will inherit create/edit/delete permissions from their parent node permissions.

  global $user;
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    $types = variable_get('sba_action_types', array());
    if ((isset($node->type) && !in_array($node->type, $types)) || empty($node->type)) {
      return FALSE;
    }

    // If a message is user editable, disable creation or additional messages for that node
    if (arg(2) == 'messages' && arg(3) == 'add') {
      if (isset($node->message_ids)) {
        $messages = entity_load('sba_message', $node->message_ids);
        if (count($messages) == 1) {
          $message = array_pop($messages);
          $subject_editable = field_get_items('sba_message', $message, 'field_sba_subject_editable');
          $user_editable = field_get_items('sba_message', $message, 'field_sba_user_editable');
          if ($subject_editable[0]['value'] != 'Not editable' || !empty($user_editable)) {
            $loglink = l("Return to message admin.", 'springboard/node/' . $node->nid . '/messages');
            drupal_set_message(t('This action\'s current message is user-editable, additional messages may not be created for this action until user editing is disabled. !link', array('!link' => $loglink)), 'error', FALSE);
            return false;
          }
        }
      }
    }

    if (user_access('administer sba messages', $account)) {
      return TRUE;
    }

    if (user_access("{$op} any {$node->type} content")) {
      return TRUE;
    }

    //message tab on node view page
    $arg = arg(3);
    if ($op == 'manage-messages' && empty($arg)) {
      if (user_access("create {$node->type} content")) {
        return TRUE;
      }
    }

    if ($op == 'create' && user_access("create {$node->type} content")) {
      if(user_access("edit own {$node->type} content") &&  $node->uid == $user->uid) {
        return TRUE;
      }
      if(user_access("edit any {$node->type} content")) {
        return TRUE;
      }
    }

    if (user_access("{$op} own {$node->type} content") &&  $node->uid == $user->uid) {
      return TRUE;
    }
    elseif(user_access("{$op} own {$node->type} content") &&  $node->uid != $user->uid) {
      return FALSE;
    }
  }

  return FALSE;
}


/**
 * Implements hook_module_implements_alter
 *
 * Helps add custom access control to a path defined in sba_message views.
 *
 * @param $implementations
 * @param $hook
 *
 */
function sba_message_module_implements_alter(&$implementations, $hook) {
  // When the implementations of hook_menu_alter are called, we need our module
  // to be called after views, so let's remove it from the implementations then
  // add it to the end.
  if ($hook == 'menu_alter') {
    if (isset($implementations['sba_message'])) {
      unset($implementations['sba_message']);
      $implementations['sba_message'] = FALSE;
    }
  }
}

/**
 * Implement hook_entityreference_prepopulate_providers_info().
 *
 * Grab our entity reference fromthe node url rather than query string
 */
function sba_message_entityreference_prepopulate_providers_info() {
  return array(
    'node_url' => array(
      'title' => t('Node URL'),
      'description' => t('Prepopulate reference ID from node/%/message URL. Only for use by Springboard Advocacy content types.'),
      'callback' => 'sba_message_prepopulate_get_values_from_node_url',
    ),
  );
}

/**
 * Get values for prepopulating fields via URL.
 *
 * @param $field
 *   The field info array.
 * @param $instance
 *   The instance info array.
 *
 * @see
 *   entityreference_prepopulate_get_values()
 */
function sba_message_prepopulate_get_values_from_node_url($field, $instance) {
  $field_name = $field['field_name'];
  if (arg(0) == 'node' && arg(2) == 'messages' && is_numeric(arg(1))) {
    return array(arg(1));
  }
}

/**
 * Implements hook_form_FORMID_alter
 *
 * Add an options checkbox to the message landing page draggable form
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function sba_message_form_views_form_sba_messages_node_block_1_alter(&$form, &$form_state, $form_id){

   $val = '';
   $messages = $form_state['build_info']['args'][0]->result;
   if (isset($messages) && count($messages) > 1) {
     $precedence = db_query("SELECT precedence FROM {sba_form_id} WHERE nid = :nid", array(':nid' => arg(1)))->fetchField();
     $val = !empty($precedence) ? $precedence : 0;

     $form['precedence'] = array(
       '#type' => 'checkbox',
       '#weight' => 99,
       '#title' => t('Use message order.'),
       '#default_value' => $val,
       '#description' => t('Check this box if you wish to enforce message ' .
         'precedence by sort order. If you check this box, only the first message ' .
         'that is eligible  for delivery to elected officials - via the user\'s zip ' .
         'code/ congressional district verification - will be sent. ' .
         'The subsequent messages will be ignored.'),
     );
     $form['actions']['submit']['#submit'][] = 'sba_message_drag_submit';
   }
  else {
    unset($form['actions']);
  }
}

/**
 *
 * Save the value for the precedence option from the message landing page draggable form
 * into the message entity data array. Message weight will be used by the API to filter
 * deliverable messages.
 *
 * @param $form
 * @param $form_state
 */
function sba_message_drag_submit(&$form, &$form_state){
    $precedence = $form_state['values']['precedence'];
    if(arg(0) == 'node' && is_numeric(arg(1))) {
      $record = array(
        'nid' => arg(1),
        'precedence' => $precedence,
      );
      drupal_write_record('sba_form_id', $record,  array('nid'));
    }
    $messages = $form_state['values']['draggableviews'];
      foreach($messages as $message) {
        if (isset($message['id'])) {
          $sba_message = sba_message_load($message['id']);
          $sba_message->data['weight'] = $message['weight'];
          $sba_message->data['precedence'] = $precedence;
          $sba_message->save();
        }
      }
}

/**
 * Implements hook_node_delete
 *
 * When an action node is deleted, delete its messages
 *
 * @param $node
 */
function sba_message_node_delete($node) {
  $types = variable_get('sba_action_types', array());
  if (in_array($node->type, $types)) {
    $sba_message_ids = db_query(
      'SELECT entity_id FROM {field_data_field_sba_action_id} a WHERE a.field_sba_action_id_target_id = :nid',
       array(':nid' => $node->nid))
       ->fetchAllAssoc('entity_id');

    sba_message_delete_multiple(array_keys($sba_message_ids));
  } 
}

/**
 * Implements hook_entity_info().
 *
 * We define two entities here - SBA Message Type and SBA Message.
 * Different Action types will have different message types.
 */
function sba_message_entity_info() {
  $return['sba_message'] = array(
    'label' => t('SBA Message'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'SbaMessage',
    'controller class' => 'SbaMessageController',
    'base table' => 'sba_message',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'sba_message_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the sba_message types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'sba_message_create',
    'access callback' => 'sba_message_access',
    'module' => 'sba_message',
    // The information below is used by the SBA MessageUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'node/%node/messages',
      'file' => 'sba_message.admin.inc',
      'controller class' => 'SbaMessageUIController',
      'menu wildcard' => '%sba_message',
    ),
  );
  // The entity that holds information about the entity types	  
  $return['sba_message_type'] = array(
    'label' => t('SBA Message Type'),
    'entity class' => 'SbaMessageType',
    'controller class' => 'SbaMessageTypeController',
    'base table' => 'sba_message_type',
    'fieldable' => FALSE,
    'bundle of' => 'sba_message',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'sba_message',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the sba_message types via a hook to avoid a recursion
 * issue as loading the sba_message types requires the entity info as well.
 *
 *  @TODO items defining admin paths for the message entities will be removed, eventually.
 */
function sba_message_entity_info_alter(&$entity_info) {
  foreach (sba_message_get_types() as $type => $info) {
    $entity_info['sba_message']['bundles'][$type] = array(
      'label' => $info->label,
    );
  }
}

/**
 * Implements hook_permission().
 *
 *  @TODO Admin perms are to be removed.
 */
function sba_message_permission() {
  // We set up permissions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer sba messages' => array(
      'title' => t('Administer sba_messages'),
      'description' => t('Edit and delete all sba_messages'),
    ),  
  );
  return $permissions;  
}

/**
 * Gets an array of all sba_message types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return SbaMessageType[]
 *   Depending whether $type isset, an array of  types or a single one.
 */
function sba_message_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our sba_message entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('sba_message_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Menu argument loader; Load a sba_message type by string.
 *
 * @param $type
 *   The machine-readable name of a sba_message type to load.
 * @return
 *   A sba_message type array or FALSE if $type does not exist.
 */
function sba_message_type_load($type) {
  return sba_message_get_types($type);
}

/**
 * Fetch a sba_message object.
 *
 * @param $sba_message_id
 *   Integer specifying the sba_message id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $sba_message object or FALSE if it cannot be loaded.
 *
 * @see sba_message_load_multiple()
 */
function sba_message_load($sba_message_id, $reset = FALSE) {
  $sba_messages = sba_message_load_multiple(array($sba_message_id), array(), $reset);
  return reset($sba_messages);
}

/**
 * Load multiple sba_messages based on certain conditions.
 *
 * @param $sba_message_ids
 *   An array of sba_message IDs.
 * @param $conditions
 *   An array of conditions to match against the {sba_message} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of sba_message objects, indexed by sba_message_id.
 *
 * @see entity_load()
 * @see sba_message_load()
 */
function sba_message_load_multiple($sba_message_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('sba_message', $sba_message_ids, $conditions, $reset);
}

/**
 * Deletes a sba_message.
 */
function sba_message_delete(SbaMessage $sba_message) {
  $status = $sba_message->delete();
  //cleanup draggableviews table
  db_delete('draggableviews_structure')
    ->condition('entity_id', $sba_message->sba_message_id)
    ->execute();
}

/**
 * Delete multiple sba_messages.
 *
 * @param $sba_message_ids
 *   An array of sba_message IDs.
 */
function sba_message_delete_multiple(array $sba_message_ids) {
  entity_get_controller('sba_message')->delete($sba_message_ids);
}

/**
 * Create a sba_message object.
 */
function sba_message_create($values = array()) {
  return entity_get_controller('sba_message')->create($values);
}

/**
 * Saves a sba_message to the database.
 *
 * @param $sba_message
 *   The sba_message object.
 */
function sba_message_save(SbaMessage $sba_message) {
  return $sba_message->save();
}

/**
 * Saves a sba_message type to the db.
 */
function sba_message_type_save(SbaMessageType $type) {
  $type->save();
}

/**
 * Deletes a sba_message type from the db.
 */
function sba_message_type_delete(SbaMessageType $type) {
  $type->delete();
}

/**
 * URI callback for sba_messages
 */
function sba_message_uri(SbaMessage $sba_message){
  return array(
    'path' => 'sba_message/' . $sba_message->sba_message_id,
  );
}

/**
 * Menu title callback for showing individual entities
 */
function sba_message_page_title(SbaMessage $sba_message){
  return $sba_message->name;
}

/**
 * Implements hook_views_api().
 */
function sba_message_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'sba_message') . '/views',
  );
}

/**
 * Implement hook_theme().

 */
function sba_message_theme() {
  return array(
    'views_exposed_form' => array(
      'template' => 'templates/views-exposed-form--targets-block-3',
      'render element' => 'form',
    ),
    'views_view' => array(
      'template' => 'templates/views-view--targets-block-3',
      'render element' => 'form',
    ),
  );
}

/**
 * Override springboard theme's conversion of button text.
 * @param $vars
 * @param $hook
 */
function sba_message_preprocess_views_exposed_form(&$vars, $hook) {
  if(isset($vars['theme_hook_suggestion']) &&  $vars['theme_hook_suggestion'] == 'views_exposed_form__targets__block_3') {
    unset($vars['form']['submit']['#printed']);
    $vars['target_button'] = drupal_render($vars['form']['submit']);
  }
}


/**
 * The class used for sba_message entities
 */
class SbaMessage extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'sba_message');
  }

  protected function defaultLabel() {
    return $this->name;
  }
}


/**
 * The class used for sba_message type entities
 */
class SbaMessageType extends Entity {
  
  public $type;
  public $label;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'sba_message_type');
  }
}

/**
 * The Controller for SBA Message entities
 */
class SbaMessageController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a sba_message - we first set up the values that are specific
   * to our sba_message schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the sba_message.
   *
   * @return
   *   A sba_message object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our SBA Message
    $values += array( 
      'sba_message_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );
    
    $sba_message = parent::create($values);
    return $sba_message;
  }
}


/**
 * The Controller for SBA Message entities
 */
class SbaMessageTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
   /**
   * Create a sba_message type - we first set up the values that are specific
   * to our sba_message type schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the sba_message.
   *
   * @return
   *   A sba_message type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our SBA Message
    $values += array( 
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $sba_message_type = parent::create($values);
    return $sba_message_type;
  }
}